웹 소켓
- HTML5에 새로 추가된 스펙으로 실시간 양방향 데이터 전송을 위한 기술이며, HTTP와 다르게 WS라는 프로토콜을 사용함. 브라우저가 WS 프로토콜을 지원사면 사용할 수 있음.

SSE (sever Sent Events)
- 처음에 한 번만 연결하면 서버가 클라이언트에 지속적으로 데이터를 보냄
- 클라이언트에서 서버로는 데이터를 보낼 수 없음. = 서버에서 클라이언트로 데이터를 보내는 단방향 통신
- 굳이 양방향 통신(웹소켓)이 필요 없는 경우에 사용(경매 등)

WS
- > npm i ws : 설치
- req.headers['x-forwarded-for'] || req.connection.remoteAddress; : 클라이언트 아이피 알아내기
- 웹 소켓 상태 4가지 : CONNECTION(연결중), OPEN(열림), CLOSING(닫는 중), COLSED(닫힘) OPEN일때만 에러 없이 메시지 보내기 가능
- 간단하게 웹 소켓을 사용하고자 할 때 좋음

Socket.IO 
- 서비스가 복잡해질 때 사용하면 좋음
- > npm i socket.io : 설치
- 일단 폴링 연결 후, 웺 소켓을 사용할 수 있다면 웹 소켓으로 업그레이드함.
- 처음부터 웹 소켓만 사용하고 싶다면, 클라이언트에 transports : ['websocket'] 옵션을 주면 됨.

socket.js의 axios 요청
socket.js에서 요청을 보낼 때는 요청자가 누구인지에 대한 정보가 들어 있지 않음. express-session 에서는 세션 쿠키인 req.signedCookies['connect.sid']를 보고 현재 세션이 누구에게 속해있는지를 판단함
브라우저에서 axios 요청을 보낼 때는 자동으로 쿠키를 같이 넣어서 보내지만, 서버에서 axios 요청을 보낼 때는 쿠키가 같이 보내지지 않음.
따라서 express-session이 요청자가 누구인지 판단할 수 없음. express-session이 판단할 수 있게 하려면 요청 헤더에 세션 쿠키를 직접 넣어야 함.
io 객체에 cookie-parser를 연결한 후 axios 요청을 보낼 때 connect.sid 쿠키를 직접 설정해보자
쿠키 암호화를 위해 cookie-signature 패키지 설치(npm i cookie-signature)

기타
- 특정인에게 메시지 보내기
    socket.to(소켓 아이디).emit(이벤트, 데이터);
- 나를 제외한 모두에게 메시지 보내기
    socket.broadcast.emit(이벤트, 데이터);
    socket.broadcast.to(방 아이디).emit(이벤트, 데이터);

과제
- 채팅방에 현재 참여자 수나 목록 표시하기(join, exit 이벤트에 socket.adapter.rooms에 들어 있는 참여자 목록 정보를 같이 보내기)
- 시스템 메시지까지 DB에 저장하기(입장용, 퇴장용 라우터를 새로 만들어 라우터에서 DB와 웹 소켓 처리하기)
- 채팅방에서 한 사람에게 귓속말 보내기(화면을 만들고 socket.to(소켓 아이디) 메서드 사용하기)
- 방장 기능 구현하기(방에 방장 정보를 저장한 후 방장이 나갔을 때 방장을 위임하는 기능 추가하기)
- 강퇴 기능 구현하기(강퇴 소켓 이벤트 추가하기)

정리
- 웹 소켓과 HTTP는 같은 포트를 사용할 수 있으므로 따로 포트를 설정할 필요가 없음
- 웹 소켓은 양방향 통신이므로 서버뿐만 아니라 프런트엔드 쪽 스크립트도 사용해야 함
- Socket.IO를 사용하면 웹 소켓을 지원하지 않는 브라우저에서까지 실시간 통신을 구현할 수 있음
- Socket.IO 네임스페이스와 방 구분을 통해 실시간 데이터를 필요한 사용자에게만 보낼 수 있음
- app.set('io', io)로 소켓 객체를 익스프레스와 연결하고, req.app.get('io')로 라우터에서 소켓 객체를 가져오는 방식 기억하기
- 소켓 통신과 함께 데이테베이스 조작이 필요한 경우, 소켓만으로 해결하기보다는 HTTP 라우터를 거치는 것이 좋음