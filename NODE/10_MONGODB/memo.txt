1. mongoDB
    - 자바스크립트 문법을 사용하는 DB
    - NoSQL(Not only SQL)
        ✔ 자유로운 데이터 입력
            고정된 테이블이 없음. 테이블에 상응하는 컬렉션이라는 개념이 있긴 하지만, 컬럼을 따로 정의하지는 않음.
            하나의 컬렉션을 만들고 그 안에 들어가는 데이터는 다큐먼트마다 다를 수 있음.
        ✔ 컬렉션 간 JOIN 미지원
            JOIN을 흉내 낼 수는 있지만, 하나의 쿼리로 여러 테이블을 합치는 작업이 항상 가능하지는 않음.
        ✔ 확장성, 가용성
            데이터의 일관성을 보장해주는 기능이 약한 대신, 데이터를 빠르게 넣을 수 있고 쉽게 여러 서버에 데이터를 분산할 수 있음.
        ✔ 용어(컬렉션, 다큐먼트, 필드)
            테이블 -> 컬렉션, 로우 -> 다큐먼트, 컬럼 -> 필드
        ✔ SQL과 NoSQL을 동시에 사용하는 예시
            항공사 예약 시스템의 경우, 비행기 표에 관한 정보가 모든 항공사에 일관성 있게 전달되어야 하므로 예약 처리 부분의 데이터베이스는 SQL을 사용하지만
            핵심 기능 외의 빅데이터, 메시징, 세션 관리 등에는 확장성과 가용성을 위해 NoSQL을 사용할 수도 있음.

2. 설치
    - 공식 사이트(https://www.mongodb.com/download-center/community) 에서 On-Premises -> MongoDB Community Server 탭 -> Download 버튼
    - Coose Setup Type 에서 Complete 버튼을 눌러 제공하는 모든 프로그램 기능을 설치
    - Service Configuration 화면에서는 체크박스를 해제
    - Install MongoDB Campass탭에서 Install MongoDB Campass에 체크 표시를 하여 몽고디비 컴퍼스도 같이 설치함.
    - 몽고디비가 설치된 경로(기본적으로 C:\Promgram Files\MongoDB\Server\4.2\bin)으로 이동해서 콘솔에서 mongod 명령어를 입력하여 몽고디비를 실행(C:\data\db 폴더가 없으면 실행되지 않으므로 반드시 폴더를 먼저 만들어야 함)
    - 몽고디비를 사용할 일이 있을 때마다 mongod 명령어로 먼저 서버를 실행해야 함.
    - 매번 실행하기 귀찮다면
        명령 프롬프트를 관리자 권한으로 실행한 뒤
        > mongd --dbpath "C:\data\db" --logpath "C:\Program Files\MongoDB\Server\4.2\log\mongod.log" --onstall --serviceName "MongoDB"
        명령어 입력 후 윈도 작업 표시줄 검색창에서 services.msc 파일을 검색하여 실행 -> MongoDB를 찾아 서비스 시작 버튼을 누름.
        MongoDB의 상태가 실행 중으로 바뀌었으면 성공
    - 몽고디비 프롬프트에 접속하려면 같은 폴더에서 콘솔을 하나 더 열어 mongo 명령어를 입력. 프롬프트가 >로 바뀌었다면 성공.
    - 관리자 권한 추가
        > use admin
        > db.createUser({user:'이름', pwd:'비밀번호', roles:['root']})
    - mongod를 입력했던 콘솔을 종료한 뒤, mongod --auth 명령어로 접속 --auth는 로그인이 필요하다는 뜻
    - mongo를 입력했던 콘솔도 종료한 후 다시 mongo admin -u 이름 -p 비밀번호 명령어로 접속

3. 데이터베이스 만들기
    - use [데이터베이스명] : 데이터베이스 만들기
    - show dbs : 데이터베이스 목록 확인하기 (데이터를 최소 한 개 이상 넣어야 목록에 표시됨)
    - db : 현재 사용 중인 데이터베이스를 확인하는 명령어
    - 컬렉션을 따로 생성하지 않아도 됨. 다큐먼트를 넣는 순간 컬렉션도 자동 생성됨. 
    - db.createCollection('users') : 컬렉션을 직접생성하는 명령어
    - show collections : 컬렉션 목록 확인

4. CRUD
    ① Cretae(생성)
        - 컬렉션에 컬럼을 정의하지 않아도 되므로 컬렉션에 아무 데이터나 넣을 수 있음. 
        - 자료형 : 기본적으로 자바스크립트 문법을 사용하므로 자바스크립트의 자료형을 따름. Date나 정규표현식 같은 자바스크립트 객체를 자료형으로 사용할 수 있음.
            objectId는 MySQL에서 기본 키로 쓰이는 값과 비슷한 역할을 함. 고유한 값을 가지므로 다큐먼트를 조회할 떄 사용할 수 있음. _id로 표현됨.
        - db.컬렉션명.save(다큐먼트) : 다큐먼트 생성 명령어
            예) db.users.save({ name:'zero', age: 24, married: false, comment: '안녕하세요. 간단히 몽고디비 사용 방법에 대해 알아봅시다.', createdAt : new Date() });
                db.users.save({ name:'nero', age: 32, marreid: true, comment : '안녕하세요. zero의 친구 nero입니다.', createdAt : new Date() });
                db.users.find({name:'zero'}, {_id : 1}) -- objectId를 구해서 외래키처럼 사용할 테이블에 넣음
                db.comments.save({commenter:ObjectId('검색값'), comment : '안녕하세요. zero의 댓글입니다.', createdAt :new Date()});
    ② Read(조회)
        - db.컬렉션명.find({}); : 컬렉션 내의 모든 다큐먼트를 조회
        - db.users.find({}, {_id: 0, name : 1, married: 1}); : 조회하고 싶은 필드만 1 또는 true로 하면 특정 필드만 조회 가능. _id는 기본적으로 가져오게 되어있으므로 0또는 false로 막아줘야함.
        - db.users.find({조건 필드1 : { &gt : 30 }, 조건 필드2 : true}, {_id : 0, 조회 필드1, 조회 필드2});  : &gt(초과), &gte(이상), &lt(미만), &lte(이하), &ne(같지 않음), &or(또는), $in(배열 요소 중 하나)
        - db.users.find({$or [{ age : {&gt : 30} }, {married : false} ]} {_id : 0, name : 1, age : 1}) : OR 연산은 &or로 묶어줌
        - db.users.find({}, {_id : 0, name : 1, age : 1} ).sort({age : -1}) : sort 명령어를 통해 정렬 가능. -1은 내림차순, 1은 오름차순
        - db.users.find({}, {_id : 0, name : 1, age : 1}).sort({ age : -1}).limit(1);   : limit 메서드를 통해 조회할 다큐먼트 개수를 설정할 수도 있음.
        - db.users.find({}, {_id : 0, name : 1, age : 1}).sort({ age : -1}).limit(1).skip(1);  : skip ㅔㅁ서드를 통해 몇 개를 건너뛸지 설정할 수도 있음.
    ③ Update(수정)
        - db.users.update({ name : 'nero' }, { $set : { domment : '안녕하세요. 이 필드를 바꿔보겠습니다!' } }); : 첫 번째 객체는 수정할 다큐먼트를 지정하는 객체고, 두 번째 객체는 수정할 내용을 입력하는 객체.
        - $set 연산자를 사용하지 않고 일반 객체를 넣는다면 다큐먼트가 통째로 두 번째 인수로 주어진 객체로 수정되어버림. 따라서 일부만 수정하고 싶다면 반드시 $set 연산자를 사용하도록 해야함.
    ④ Delete(삭제)
        - db.users.remove({ name : 'zero });    : 삭제할 다큐먼트에 대한 정보가 담긴 객체를 첫 번째 인수로 제공하면 됨.

5. 몽구스(Mongoose)
    - 몽고디비에 없어서 불편한 기능들을 몽구스가 보완해줌.
    - 스키마(schema) : 몽고디비는 테이블이 없어서 자유롭게 데이터를 넣을 수 있지만, 실수로 잘못된 자료형의 데이터를 넣을 수도 있고, 다른 다큐먼트에는 없는 필드의 데이터를 넣을 수도 있음. 몽구스에서는 몽고디비에 데이터를 넣기 전에 노드 서버 단에서 데이터를 한 번 필터링하는 역할을 함.
    - JOIN 기능을 populate라는 메서드로 어느 정도 보완함. 
    - 프로미스 문법과 강력하고 가독성이 높은 쿼리 빌더를 지원함.
 
 6. 연동
    - 필요한 패키지 설치
        > npm i express morgan nunjucks mongoose
        > npm i -D nodemon
    - 몽고디비는 주소를 사용해 연결함. 주소 형식은 mongodb://[username:password@]host[:port][/[database][?options]] ([]부분은 있어도 되고 없어도 됨을 의미)
        > mongodb://root:1234@localhost:27017/admin
    - schemas 폴더를 루트 디렉터리에 생성함. 폴더 안에 index.js 파일을 생성한 후 연동 정보와 메서드를 넣는다.

7. 스키마 만들기
    - schemas 폴더 안에 컬렉션 별로 스키마 생성자(Schema)를 통해 스키마를 생성함.
    - 각각의 필드를 정의하는데 _id는 기본 키로 생성하므로 _id는 생략 가능.
    - 몽구스 스키마는 자료형으로 String, Number, Buffer, Boolean, Mixed, ObjectId, Array 등을 가질 수 있음.
    - mongoose.model('User', userSchema, 'user_table') : 몽구스는 model 메서드의 첫 번재 인수로 컬렉션 이름을 만듦. 첫 번째 인수가 User라면 첫 글자를 소문자로 만든 뒤 복수형으로 바꿔서 users 컬렉션을 생성함. 이러한 강제 개명이 싫다면 세 번째 인수로 컬렉션 이름을 줄 수 있음.
    