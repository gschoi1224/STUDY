JWT(JSON Web Token) : JSON 형식의 데이터를 저장하는 토큰. 세 부분으로 구성됨
- 헤더(HEADER) : 토큰 종류와 해시 알고리즘 정보가 들어 있음.
- 페이로드(PAYLOAD) : 토큰의 내용물이 인코딩된 부분.
- 시그니쳐(SIGNATURE) : 일련의 문자열이며, 시그니처를 통해 토큰이 변조되었는지 여부를 확인할 수 있음. JWT 비밀키로 만들어짐.
https://jwt.io 사이트에서 내용을 확인할 수 있음.

> npm i jsonwebtoken

JWT 토큰으로 로그인하는 방법
세션을 사용하지 않고 로그인할 수 있기 때문에 서비스의 규모가 클수록 DB의 부담을 줄일 수 있음.
로그인 완료 시 세션에 데이터를 저장하고 세션 쿠키를 발급하는 대신 JWT 토큰을 쿠키로 발급하면 됨.
router.post('/login', isNotLoggedIn, (req, res, next) => {
    passport.authenticate('local', { session : false }, (authError, user, info) => {
        if (authError) {
            ...
        }
    })
})
세션에 데이터를 저장하지 않으므로 serializeUser와 deserializeUser는 사용하지 않음. 
그 후 모든 라우터에 verifyToken 미들웨어를 넣어 클라이언트에서 보낸 쿠키를 검사한 후 토큰이 유효하면 라우터로 넘어가고, 그렇지 않으면 401이나 419 에러를 응답

express-rate-limit 패키지 : 과금 체계별로 횟수에 차이를 둘 수 있게 함
> npm i express-rate-limit

응답코드
200 : JSON 데이터
401 : 유효하지 않은 토큰
410 : 새로운 버전이 나옴
419 : 토큰이 만료됨
429 : 1분에 한 번만 요청 가능
500~ : 기타 서버 에러


CORS(Cross-Origin Resource Sharing)
Access-Control-Allow-Origin : 헤더가 없다는 내용. 브라우저와 서버의 도메인이 일치하지 않으면 기본적으로 요청이 차단됨
이 현상은 브라우저에서 서버로 요청을 보낼 때만 발생하고, 서버에서 서버로 요청을 보낼 때는 발생하지 않음. 
콘솔에서 Network 탭을 보면 POST 대신 OPTIONS로 표시됨 이 메서드는 실제 요청을 보내기 전에 서버가 이 도메인을 허용하는지 체크하는 역할을 함
해결법 : 응답 헤더에 Access-Control-Allow-Origin 헤더를 넣어야 함. 이 헤더는 클라이언트 도메인의 요청을 허락하겠다는 뜻을 가지고 있음. 
res.set 메서드로 직접 넣어도 되지만 npm에는 편하게 설치할 수 있는 cors라는 패키지가 있음
응답 헤더를 조작하려면 API 서버에서 바꿔야 함(응답은 API서버가 보내는 것이기 때문에)
=> 응답헤더를 보면 Access-Control-Allow-Origin : *로 되어 있음(모든 클라이언트의 요청을 허용함)
=> 비밀 키가 모두에게 노출 됨
=> 요청 시 비밀 키 발급 시 허용한 도메인을 적게 함. 호스트와 비밀 키가 모두 일치할 때만 CORS를 허용하게 수정


router.use(cors());

router.use((req, res, next) => {
    cors()(req, res, next);
})
위 두 코드는 같은 역할을 함

스스로 해보기 
- 팔로워나 팔로잉 목록을 가져오는 API 만들기 (nodebird-api에 새로운 라우터 추가)
- 무료 도메인과 프리미엄 도메인 간에 사용량 제한을 다르게 적용하기(apiLimiter를 두 개 만들어서 도메인별로 다르게 적용하기 POST /auth/login라우터 참조)
- 클라이언트용 비밀 키와 서버용 비밀 키를 구분해서 발급하기 (Domain 모델 수정)
- 클라이언트를 위해 API 문서 작성하기(swagger나 apidoc 사용)