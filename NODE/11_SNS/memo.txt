1. 개발 환경
    사용자와 게시물 간, 게시물과 해시태그 간의 관계가 중요하므로 관계형 데이터베이스인 MySQL 선택
    > npm i sequelize mysql2 sequlize-cli  -- node_modules 폴더와 package-lock.json 생성
    > npx sequelize init    -- config, migrations, models, seeders 폴더 생성, npx를 사용하는 이유는 전역 설치(npm i -g)를 피하기 위해
    views 폴더 : 템플릿 파일
    routes 폴더 : 라우터들
    public 폴더 : 정적 파일들
    passport 폴더 : passport 패키지를 위한 폴더
    app.js : 익스프레스 서버 코드
    .env :  설정값들
    템플릿 엔진 nunjucks 사용
    > npm i express cookie-parser express-session morgan multer dotenv nunjucks
    > npm i -D nodemon

2. DB 세팅
    modules 폴더 : 모델 저장
        - user.js : 사용자 정보 저장하는 모델. SNS로 로그인 했을 경우에 provider와 snsId를 저장함. provide가 local이면 로컬 로그인을 한 것이고, kakao면 카카오 로그인을 한 것.
                    테이블 옵션으로 timestamps와 paranoid가 true로 주어졌으므로 createdAt, updatedAt, deletedAt 칼럼이 생성됨.
        - post.js : 게시글 내용과 이미지 경로를 저장. 게시글 등록자의 아이디를 담은 컬럼은 나중에 관계를 설정할 때 시퀄라이즈가 알아서 생성함.
        - hashtag.js : 해시태그 이름을 저장. 따로 두는 것은 나중에 태그로 검색하기 위해서임.
        - index.js : 각각의 모델들을 시퀄라이즈 객체에 연결하는 역할.
        - 관계 
            > User 모델과 Post 모델은 1(User) : N(Post) 관계에 있으므로 hasMany(User)와 belongsTo(Post) 연결되어 있음.
              사용자가 한명이고 그에 속한 게시글이 여러 개이므로 각각의 게시글에 게시글의 주인이 누구인지 넣어야 함. 따라서 belongsTo가 게시글에 붙고 post.getUser, post.addUser 같은 관계 메서드가 생성됨
            > User테이블은 같은 테이블간 N:M의 관계에 있음. 이럴 떄는 이름을 따로 정해야함. through 옵션을 통해 정할 수 있음(Follow 테이블) 
              이 모델에서 사용자 아이디를 저장하는 컬럼 이름이 둘 다 UserId면 누가 팔로워고 누가 팔로잉 중인지 구분되지 않으므로 foreignKey 옵션에서 따로 이름을 정해줘야 함.
              같은 테이블간 N:M의 관계에서는 as 옵션도 넣어야 함. 둘 다 User 모델이라 구분이 되지 않기 때문. 
              as는 foreignKey와 반대되는 모델을 가리킴. foreignKey가 followerId면 as는 Followings임. 팔로워를 찾으려면 먼저 팔로잉하는 사람의 아이디를 찾아야 하기 때문에.
              as에 특정한 이름을 지정하면 user.getFollowers, user.getFollowings 같은 관계 메서드도 사용할 수 있음. include시에도 as에 같은 값을 넣으면 관계 쿼리가 작동함.
            > Post 모델과 Hashtag 모델은 N:M의 관계이므로 PostHashtag라는 중간 모델이 생기고, 각각 postId와 hashtagId라는 foreignKey도 추가됨. 
              as는 따로 지정하지 않았으니 post.getHashtags, post.addHashtags, hashtags.getPosts와 같은 기본 이름의 관계 메서드들이 생성됨.
            > 자동으로 생성된 모델도 db.sequelize.models.PostHashtag, db.sequelize.models.Follw와 같이 접근 가능.
        - config/config.json : 시퀄라이즈는 config.json을 읽어 데이터베이스를 생성해주는 기능이 있음. 
        - 콘솔에서 npx sequelize db:create 명령어를 입력하면 데이터베이스가 생성됨.
        - 시퀄라이즈는 생성문 쿼리에 IF NOT EXISTS 를 자동으로 넣어주므로 테이블이 없을 때만 자동으로 생성됨.

3. 로그인 구현(Passport 모듈)
    npm i passport passport-local passport-kakao bcrypt
    app.js - passport.initialize() : 요청(req) 객체에 passport 설정을 심음
           - passport.session() : req.session 객체에 passport 정보를 저장함. req-session 객체는 express-session에서 생성하는 것이므로 passport 미들웨어는 express-session 미들웨어보다 뒤에 연결해야 함
    passport 폴더 
      - index.js
        > serializeUser는 로그인 시 실행되며, req.session(세션) 객체에 어떤 데이터를 저장할지 정하는 메서드. 매개변수로 user를 받고 나서, done 함수에 두 번째 인수로 user.id를 넘김. 
        > done 함수의 첫 번째 인수는 에러 발생 시 사용하는 것이고, 두 번째 인수에는 세션에 저장하고 싶은 데이터를 넣음. 
        > serializeUser는 로그인 시에만 실행된다면 deserializeUser는 매 요청 시 실행됨. passport.session 미들웨어가 이 메서드를 호출함.
        > serializeUser의 done의 두 번째 인수로 넣었던 데이터가 deserializeUser의 매개변수가 됨. 
        > serializeUser에서 세션에 저장했던 아이디를 받아 데이터베이스에서 사용자 정보를 조회함. 조회한 정보를 req.user에 저장하므로 req.user를 통해 로그인한 사용자의 정보를 가져올 수 있음.
        > serializeUser는 사용자 정보 객체를 세션에 아이디로 저장하는 것이고, deserializeUser는 세션에 저장한 아이디를 통해 사용자 정보 객체를 불러오는 것.
      - localStrategy.js : passport-local 모듈에서 Strategy 생성자를 불러와 그 안에 로그인 전략을 구현
      - kakaoStrategy.js : passport-kakao 모듈을 통해 카카오 로그인 구현

    routes 폴더
      - middlewares.js : 로그인한 사용자는 회원가입과 로그인에 접근할 수 없고,  로그인하지 않은 사용자는 로그아웃에 접근할 수 없게 하기 위해 로그인했는지 구분하는 미들웨어
      - page.js : 라우터 함수 중간에 상황에 맞춰 isLoggedIn과 isNotLoggedIn 미들웨어를 꽂아 넣는다.
      - auth.js : 로그인, 로그아웃, 회원가입 등을 처리