[MySQL 설치]

1. https://dev.mysql.com/downloads/installer/ 접속
2. 로그인 없이 No thanks, just start my download 클릭
3. MySQL Server와 MySQL Workbench를 골라 Products/Features To Be Installed로 옮김
3. Visual C++ 같은 파일들 모두 설치
4. 비밀번호를 설정한 후 Next 버튼이 보이지 않는다면 Alt+N 단축키로 다음 화면으로 넘어갈 수 있음
5. MySQL이 설치된 폴더로 이동한 후, 명령 프롬프트를 통해 MySQL에 접속
    > mysql -h localhost -u root -p   -- -h 뒤에는 접속할 주소를, -u 뒤에는 사용자명을 입력 -p는 비밀번호를 사용하겠다는 뜻
    Enter password : [비밀번호 입력]
    mysql >
    나가고 싶다면 exit


[워크벤치]
콘솔로는 데이터를 한눈에 보기에 무리가 있는데, 워크벤치(MySQL Workbench)라는 프로그램을 사용하면 데이터베이스 내부에 저장된 데이터를 시각적으로 관리할 수 있어 편리함.

[데이터베이스 생성하기]
    1. MySQL 프롬프트에 접속
    2. > CREATE SCHEMA [데이터베이스명] (※ MySQL에서 데이터베이스와 스키마는 같은 개념)
    3. > use [데이터베이스명] : 앞으로 [데이터베이스]를 사용하겠다는 것을 MySQL에 알리는 것.
    4. CREATE SCHEMA [데이터베이스명] 뒤에 DEFAULT CHARACTER SET utf8을 붙이면 한글을 사용할 수 있게 됨. (SQL 구문을 입력할 때는 마지막에 세미콜론을 붙여야 실행됨)

[테이블 생성하기]
    1. > CREATE TABLE [데이터베이스명.테이블명] : 테이블을 생성하는 명령어
    2. > use [데이터베이스명]을 했으면 데이터베이스명은 생략해도 됨.
    3. 유저 테이블 만들기
        CREATE TABLE nodejs.users (
            id INT NOT NULL AUTO_INCREMENT,
            name VARCHAR(20) NOT NULL,
            age INT UNSIGNED NOT NULL,
            married TINYINT NOT NULL,
            comment TEXT NULL,
            created_at DATETIME NOT NULL DEFAULT now(),
            PRIMARY KEY(id),
            UNIQUE INDEX name_UNIQUE (name ASC)
        )
        COMMENT = '사용자 정보'
        DEFAULT CHARACTER SET = utf8
        ENGINE = InnoDB;
    4. 자료형
        INT : 정수를 의미. 소수까지 저장하고 싶다면 FLOAT이나 DOUBLE 자료형을 사용하면 됨.
        VARCHAR(자릿수), CHAR(자릿수) : CHAR는 고정 길이고, VARCHAR는 가변 길이임. 예를 들어 CHAR(10)이면 반드시 길이가 10인 문자열만 넣어야 하고, 
                                       VARCHAR(10)일 경우에는 길이가 0~10인 문자열을 넣을 수 있음. CHAR에 주어진 길이보다 짧은 문자열을 넣는다면 부족한 자릿수만큼 스페이스가 채워짐.
        TEXT : 긴 글을 저장할 때 사용하며, VARCHAR와 헷갈릴 수 있음. 수백 자 이내의 문자열은 보통 VARCHAR로 많이 처리하고, 그보다 길면 TEXT로 처리하곤 함.
        TINYINT : -128부터 127까지의 정수를 저장할 때 사용함. 1 또는 0만 저장한다면 불 값(Boolean)과 같은 역할을 할 수 있음.
        DATETIME : 날짜와 시간에 대한 정보를 담고 있음. 날짜 정보만 담는 DATE와 시간 정보만 담는 TIME 자료형도 있음.
    5. 옵션
        NULL or NOT NULL : 빈칸을 허용할지 여부를 묻는 옵션.
        AUTO_INCREMENT : 숫자를 저절로 올리겠다는 뜻. 처음에 데이터를 넣으면 알아서 1을 부여하고 그 다음에는 2를 부여함.
        UNSIGNED : 숫자 자료형에 적용되는 옵션으로 UNSIGNED가 적용되어 있다면 -2147483648~2147483647 까지 저장되던게 
                   음수는 무시되고 0~4294967295까지 저장할 수 있음. FLOAT과 DBOULE 에는 적용이 불가능 함. 나이처럼 음수가 불가능한 컬럼에는 적용하는게 좋음.
        ZEROFILL : 숫자의 자릿수가 고정되어 있을 때 사용할 수 있음. 가끔 자료형으로 INT 대신 INT(자릿수)처럼 표현하는 경우가 있는데 ZEROFILL을 설정해둔다면 비어 있는 자리에 모두 0을 넣는다. 
        DEAFULT : 데이터베이스 저장 시 해당 컬럼에 값이 없다면 MySQL이 기본값을 넣어줌.
        PRIMARY KEY : 해당 칼럼을 기본 키로 설정함. 
        UNIQUE INDEX : 해당 값이 고유해야 하는지에 대한 옵션. 해당 칼럼의 이름과 정렬을 입력하면 됨. 기본 키는 자동으로 UNIQUE INDEX를 포함함.
    
    6. 테이블 설정
        COMMENT : 테이블에 대한 보충 설명을 의미함. 테이블이 무슨 역할을 하는지 적어두면 됨. 필수는 아님.
        DEFAULT CHARCTER SET : utf8로 설정하지 않으면 한글이 입력되지 않으니 반드시 설정해야 함.
        ENGINE : MyISAM과 InnoDB가 많이 사용됨.
    
    7. 테이블 확인
        > SHOW TABLES; : 선택된 데이터베이스의 모든 테이블을 보여줌.
        > DESC [테이블명] :만들어진 테이블을 확인
        > DROP TABLE [테이블명] : 잘못 만들어진 테이블 제거
        
    8. 댓글 테이블 만들기
        CREATE TABLE nodejs.comments (
            id INT NOT NULL AUTO_INCREMENT,
            commenter INT NOT NULL,
            comment VARCHAR(100) NOT NULL,
            created_at DATETIME NOT NULL DEFAULT now(),
            PRIMARY KEY(id),
            INDEX commenter_idx (commenter ASC),
            CONSTRAINT commenter
            FOREIGN KEY (commenter)
            REFERENCES nodejs.users (id)
            ON DELETE CASCADE
            ON UPDATE CASCADE
        )
        COMMENT = '댓글'
        DEFAULT CHARSET = utf8mb4 -- 한글 뿐만 아니라 이모티콘까지 가능
        ENGINE = InnoDB;

    9. CRUD
        - Create(생성) 
        mysql > INSERT INTO users (name, age, married, comment) VALUES ('zero', 24, 0, '자기소개1');
        mysql > INSERT INTO users (name, age, married, comment) VALUES ('nero', 32, 1, '자기소개2');
        mysql > INSERT INTO comments (commenter, comment) VALUES (1, '안녕하세요. zero의 댓글입니다');
        - Read(조회)
        mysql > SELECT * FROM nodejs.users;
        - UPDATE(수정)
        mysql > UPDATE users SET comment = '바꿀 내용' WHERE id = 2;
        - DELETE(삭제)
        mysql DELETE FROM nodejs.users WHERE id = 2;

    10. 패키지 설치
        > npm i express morgan nunjucks sequelize sequelize-cli mysql2
        > npm i -D nodemon 
        sequelize-cli는 시퀄라이즈 명령어를 실행하기 위한 패키지, mysql2는 MySQL과 시퀄라이즈를 이어주는 드라이버
        전역설치 없이 명령어로 사용하려면 npx 사용
        > npx sequelize init : 시퀄라이즈 명령어를 실행하기 위한 패키지
        config, models, migrantions, seeders 폴더가 자동 생성됨

    11. 구성
        /config/config.json 데이터베이스 접속 정보
        /models/user.js users 테이블 모델을 만들고 모듈로 exports 함.
        /models/comment.js comments 테이블 모델을 만들고 모듈로 exports 함.
        /models/index.js  /config/config.json의 정보로 sequelize 객체를 만듦. user와 comment의 관계도 정의함.
        /app.js 서버 메인 index.js의 sequelize 객체로 db 사용함

    12. 관계 정의
        1(유저) : N(댓글) 관계 - 유저 한명이 댓글을 여러 개 달 수는 있지만 댓글 하나에 유저가 여러 명일 수는 없다.
        N(해시태그) : N(게시글) 관계  - 한 개의 게시글에 해시태그가 여러 개일 수도 있고 한 개의 해시태그가 여러 게시물에 달릴 수도 있다.
        1 : 1
            db.User.hasOne(db.Info, {foreign : 'UserId', sourceKey : 'id'});
            db.Info.belogsTo(db.User, {foreign : 'UserId', targetKey : 'id'});
        N : M - 양쪽 모델에 모두 belongsToMany 메서드를 사용함
              - N:M 관계의 특성상 새로운 모델이 생성됨. through 속성에 그 이름을 적으면 됨.
              - 자동으로 만들어진 모델도 db.sequelize.models.PostHashtag 같은 방법으로 접근할 수 있음.
            db.Post.belongsToMany(db.Hashtag, {through : 'PostHashtag'});
            db.Hashtag.belongsToMany(db.Post, {through:'PostHashtag'});

    13. Sequelize 쿼리
        쿼리는 프로미스를 반환하므로 then을 붙여 결괏값을 받을 수 있음. async/await과 같이 사용할 수도 있음.
        INSERT INTO nodejs.users(name, age, married, comment) VALUES ('zero', 24, 0, '자기소개1');
            [MySQL]
                const { User } = require('../models');
            [Sequelize]
                User.create({
                    name : 'zero',
                    age : 24,
                    married : false,
                    comment : '자기소개1',
                });
        modles모듈에서 User 모델을 불러와 create 메서드를 사용하면 됨.
        ※ MySQL의 자료형이 아니라 시퀄라이즈 모델에 정의한 자료형대로 넣어야 함
            [MySQL]
                SELECT name, age FROM nodejs.users WHERE married = 1 AND age > 30;
            [Sequelize]
                const { Op } = require('sequelize');
                const { User } = require('../models');
                User.findAll({
                    attributes : ['name', 'age'],
                    where : {
                        married : true,
                        age : { [Op.gt] : 30 },
                    },
                });
        Op 연산자 : Op.gt(초과), Op.gte(이상), Op.lt(미만), Op.lte(이하), Op.ne(같지 않음), Op.or(또는), Op.in(배열 요소 중 하나), Op.notIn(배열 요소와 모두 다름)
            [MySQL]
                SELECT id, name FROM users WHERE married = 0 OR age > 30 ORDER BY age DESC;
            [Sequelize]
                const { Op } = require('sequelize');
                const { User } = require('../models');
                User.findAll({
                    attributes : ['id', 'name'],
                    where : {
                        [Op.or] : [{ married : false }, { age : { [Op.gt] : 30 } }],
                    },
                    order : [['age', 'DESC']],
                });
        수정하는 쿼리
            [MySQL]
                UPDATE nodejs.users SET comment = '바꿀 내용' WHERE id = 2;
            [Sequelize]
                User.update({
                    comment : '바꿀 내용'
                }, {
                    where : {id : 2},
                });
        삭제하는 쿼리
            [MySQL]
                DELETE FROM nodejs.users WHERE id = 2;
            [Sequelize]
                User.destroy({
                    where : {id : 2},
                });
        
        관계 쿼리
            findOne이나 findAll 메서드를 호출할때 프로미스의 결과로 모델을 반환함
            (findAll은 모두 찾는 것이므로 모델의 배열을 반환함)
            만약 특정 사용자를 가져오면서 그 사람의 댓글까지 모두 가져오고 싶다면 include 속성을 사용하면 됨.
            어떤 모델과 관계가 있는지를 include 배열에 넣어주면 됨. 배열인 이유는 다양한 모델과 관계가 있을 수 있기 때문.
                const user = await User.findOne({
                    include [{
                        model : Comment,
                    }]
                });
                console.log(user.Comments); // 사용자 댓글
            관계가 이미 설정되어 있다면 getComments(), setComments(수정), addComment(하나 생성), addComments(여러 개 생성), removeComments(삭제) 메서드를 지원
            동사 뒤에 모델의 이름이 붙는 형식.
                const user = await User.findOne({});
                const comments = await user.getComments();
                console.log(comments);
            동사 뒤의 모델 이름을 바꾸고 싶다면 관계 설정 시 as 옵션을 사용할 수 있음.
            as 옵션을 설정하면 include 시 추가되는 댓글 객체도 user.Answers로 바뀜
                // 관계를 설정할 때 as로 등극
                db.User.hasMany(db.Comment, {foreignKey : 'commenter', sourceKey : 'id', as : 'Answers'});
                // 쿼리할 때는
                const user = await User.findOne({});
                const comments = await user.getAnswers();
                console.log(comments);  // 사용자 댓글
    14. MySQL 쿼리
        시퀄라이즈의 쿼리를 사용하기 싫거나 어떻게 해야 할지 모르겠다면 직접 SQL문을 통해 쿼리할 수도 있음
            const [result, metadata] = await sequelize.query('SELECT * from comments');
            console.log(result);

    15. event.target vs. event.currentTarget
        <div onclick="checkTarget();">
            <span>test</span>
        </div>
        일 경우에 span을 누르면 event.target은 클릭된 span 태그를 반환하고, event.currentTarget은 이벤트가 바인딩된 div를 반환