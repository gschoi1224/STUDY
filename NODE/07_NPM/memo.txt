npm(Node Package Manager) : 오픈소스로 다른 사람이 만들어둔 코드를 패키지로 받아오거나 자신의 코드를 배포할 수 있음

1. package.json : 서비스에 필요한 패키지를 하나씩 추가하다 보면 패키지 수가 엄청 많아지게 되고 이 패키지들은 저마다 고유한 버전이 있으므로 어딘가에 기록해두어야 함. 
    이때 설치한 패키지의 버전을 관리하는 파일
    만드는 방법
    > npm init 
        package name : (폴더명) [프로젝트 이름 입력]
        version : (1.0.0) [프로젝트 버전 입력]
        desription : [프로젝트 설명 입력]
        entry point : index.js [자바스크립트 실행 파일 진입점. 보통 마지막으로 module.exports를 하는 파일을 지정. package.json의 main 속성에 지정됨]
        test command : [코드를 테ㅅ트할 때 이볅할 명령어를 의미함. package.json 의 scripts 속성 안의 test 속성에 저장됨]
        git repository : [코드를 저장해둔 git 저장소 주소를 의미함. package.json의 repository 속성에 저장됨]
        keywords : [npm 공식 홈페이지에서 패키지를 쉽게 찾을 수 있도록 해줌]
        author : [이름]
        license : (ISC) [해당 패키지의 라이선스] -- 오픈 소스라고 해서 모든 패키지를 아무런 제약 없이 사용할 수 있는 것은 아님. 라이선스별로 제한 사항이 있으므로 설치 전에 반드시 라이선스를 확인해야 함
                                               -- ISC, MIT나 BSD 라이선스를 가진 패키지를 사용하 ㄹ때는 사용한 패키지와 라이선스만 밝히면 자유롭게 사용 가능, GPL은 사용할 때 조심해야함

2. npm install
    > npm install express
    (ERROR만이 진짜 에러고 WARN은 단순한 경고)
    npm WARN npmtest@0.0.1 No repository failed - package.json에 repository 속성이 없어서 그런 것
    audited[숫자] packages - 패키지에 있을 수 있는 취약점을 자동으로 검사했다는 의미 
    > npm install morgan cookie-parser express-session
    패키지 여러 개 동시에 설치
    > npm install --save-dev nodemon 
    --save-dev 개발용 패키지
    > npm install --global rimraf
    --global 전역 설치 옵션, 패키지를 현재 폴더의 node_modules에 설치하는 것이 아니라 npm이 설치되어 있는 폴더에 설치. 
      이 폴더의 경로는 보통 시스템 환경 변수에 등록되어 있으므로 전역 설치한 패키지는 콘솔의 명령어로 사용 가능
      전역 설치한 패키지는 package.json에 기록되지 않음

    > rimraf node_modules 
    rimraf는 리눅스나 맥의 rm --rf 명령어를 윈도에서도 사용할 수 있게 해주는 패키지

    > npm install 
    node_modules 폴더를 지우고 npm install 만 하면 package.json에 설치한 패키지 내역을 보고 자동으로 설치해줌

    > npm install --save-dev rimraf
    > npx rimraf node_modules
    rimraf 모듈을 package.json의 devDependencies 속성에 기록한 후 앞에 npx 명령어를 붙여 실행하면 패키지를 전역 설치한 것과 같은 효과를 얻을 수 있음

    npm install 명령어는 npm i로 줄여 쓸 수 있음. --save-dev옵션은 -D로, --global옵션은 --g로 줄여 써도 됨

3. 패키지 버전 (^X.Y.Z)
    X : 첫 번째 자리는 major 버전. major 버전이 0이라면 초기 개발 중이라는 뜻. 1부터는 정식 버전을 의미함. major 버전은 하위 호환이 안 될 정도로 패키지의 내용이 수정되었을 때 올림.
    Y : 두 번째 자리는 minor 버전. minor 버전은 하위 호환이 되는 기능 업데이트를 할 때 올림.
    Z : 세 번째 자리는 petch 버전. 새로운 기능이 추가되었다기보다는 기존 기능에 문제가 있어 수정한 것을 내놓았을 때 올림
    ^ : 버전에는 포함되지 않지만 설치하거나 업데이트할 때 어떤 버전을 설치해야 하는지 알림
        - ^ : minor 버전까지만 설치하거나 업데이트함. ^1.1.1이라면 1.1.1 이상부터 2.0.0 미만 버전까지 설치됨. 1.x.x와 같이 표현할 수도 있음.
        - ~ : patch 버전까지만 설치하거나 업데이트함. ~1.1.1이라면 1.1.1 이상부터 1.2.0 미만 버전까지 설치됨. 1.1.x와 같이 표현할 수도 있음
        - >, <, > =, < =, = : 알기 쉽게 초과, 미만, 이상, 이하, 동일을 뜻함 >1.1.1이라면 반드시 1.1.1버전보다 높은 버전이 설치됨
        - @latest : 안정된 최신 버전의 패키지를 설치함. x로도 표현할 수 있음. 예) npm 1 express@latest 또는 npm i express@x
        - @next : 가장 최근 배포판을 사용할 수 있음. @latest와 다른 점은 안정되지 않은 알파나 베타 버전의 패키지를 설치할 수 있다는 것.

4. 기타 npm 명령어
    > npm outdated
        업데이트할 수 있는 패키지가 있는지 확인
    > npm update [패키지명] 
        Current와 Wanted가 다르다면 업데이트가 필요함. npm update만 하면 업데이트 가능한 모든 패키지가 Wanted에 적힌 버전으로 업데이트됨
    > npm uninstall [패키지명] 
        해당 패키지를 제거하는 명령어. 패키지가 node_modules 폴더와 package.json에서 사라짐 npm rm [패키지명] 으로 줄여 쓸 수도 있음
    > npm search [검색어]
        npm의 패키지를 검색할 수 있음. package.json에 넣어둔 keywords가 이때 사용됨
    > npm info [패키지명]
        패키지의 세부 정보를 파악하고자 할 경우
    > npm addUser
        npm 로그인을 위한 명령어
    > npm whoami
        로그인한 사용자가 누구인지
    > npm logout 
        npm addUser로 로그인한 계정을 로그아웃할 때
    > npm version [버젼]
        package.json의 버전을 올림. 원하는 버전의 숫자를 넣으면 됨. 또는 major, minor, patch라는 문자열을 넣어서 해당 부분의 숫자를 1 올릴 수도 있음
    > npm deprecate [패키지명] [버전] [메시지]
        해당 패키지를 설치할 때 경고 메시지를 띄우게 하는 명령어. 자신의 패키지에만 적용 가능
    > npm publish 
        자신이 만든 패키지를 배포할 때
    > npm unpublish
        배포한 패키지를 제거할 때. 24시간 이내에 배포한 패키지만 제거가능(의존성 때문)
    > npm ci
        package.json 대신 package-lock.json에 기반하여 패키지를 설치. 더 엄격하게 버전을 통제하여 패키지를 설치하고 싶을 때
