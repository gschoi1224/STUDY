# 문제 : P.383
# 풀이 : P.573

# 문제 해설
# 최소 편집 거리를 담을 2차원 테이블을 초기화한 뒤에 최소 편집 거리를 계산해 테이블에 저장하는 과정으로 문제를 해결
# 점화식
# 1. 두 문자가 같은 경우 : dp[i][j] = dp[i-1][j-1] - 행과 열에 해당하는 문자가 서로 같다면, 왼쪽 위에 해당하는 수를 그대로 대입
# 2. 두 문자가 다른 경우 : dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) 
# - 행과 열에 해당하는 문자가 서로 다르다면, 왼쪽(삽입), 위쪽(삭제), 왼쪽 위(교체)에 해당하는 수 중에거 가장 작은 수에 1을 더해 대입

# 답안 예시

# 최소 편집 거리(Edit Distance) 계산을 위한 다이나믹 프로그래밍
def edit_dist(str1, str2) :
    n = len(str1)
    m = len(str2)

    # 다이나믹 프로그래밍을 위한 2차원 DP 테이블 초기화
    dp = [[0] * (m + 1) for _ in range(n + 1)]

    # DP 테이블 초기화 설정
    for i in range(1, n + 1) :
        dp[i][0] = i
    for j in range(1, m + 1) :
        dp[0][j] = j
    
    # 최소 편집 거리 계산
    for i in range(1, n + 1) :
        for j in range(1, m + 1) :
            # 문자가 같다면, 왼쪽 위에 해당하는 수를 그대로 대입
            if str1[i - 1] == str2[j - 1] :
                dp[i][j] = dp[i-1][j-1]
            # 문자가 다르다면, 3가지 경우 중에서 최솟값 찾기
            else : # 삽입(왼쪽), 삭제(위쪽), 교체(왼쪽 위) 중에서 최소 비용을 찾아 대입
                dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1])

    return dp[n][m]

# 두 문자열을 입력받기
str1 = input()
str2 = input()

# 최소 편집 거리 출력
print(edit_dist(str1, str2))